// Auto Z and Corner Finding Touch Plate Script for UCCNC
// by Josh Molaver
// based on CNC Router Parts original three axis script written for Mach3 in VB
// also heavily based on RobertSpark's three axis script as published in CNCZone for UCCNC



// Version history
// 1.01 - lots of cleanup, variable names, comments, etc.  Improved messaging
// 1.00 - tested successfully using all four probe locations

// KNOWN ISSUES OR IMPROVEMENTS
// - what to do if probe edge isn't reached
// retract distance from probing X and Y is going too far, should center on probe plate.  Guessing maybe not accounting for bit diameter/radius (looks like radius)


// NOTES ON UNITS -   I haven't incorporated logic to ask you if you're working in imperial or metric.  I work in metric, but my bits are measured in imperial.  Right now I'm converting that to metric but
// you should review this code carefully to make sure you don't break anything and use debug mode.

// Variables you probably care about and should review are here

bool DebugMode = false;									// Debug Mode - true enables Debug mode (lots of prompts/details presented for troubleshooting, and movements are slowed down)
														// 			set to false for normal use once this is working
														
bool PauseProbe = true;									// Pause probing between probing X and Y axis to align the bit?  true = pauses, false does not
	
bool BitDiameterInInches = true;						//  Ask the user for bit diameter in inches.  Is there a better way to handle metric vs imperial?
	
double ProbeFeedRate = 100; 							// feedrate that all probing is done.  
double TouchPlateHeight = 25.4;							// CNC RouterParts Touchplate is 1" high
double TouchPlateWidth = (2.205 * 25.4); 				// Width of CNC RouterParts Touchplate is 2.205" (56mm) wide
double XProbeDistance = 2 * 25.4;						// How far to probe X Axis looking for the edge
double YProbeDistance = 2 * 25.4;						// How far to probe Y Axis looking for the edge
double ZProbeDistance = 1.5 * 25.4;						// How far to probe Z Axis looking for the edge
double SafeZ = 20; 										// enter your Safe Z distance.  After probing it lifts up probe height + this value
double XYProbeHeight = TouchPlateHeight+(.125*25.4); 	// How high to lift tool while probing X and Y.  I'm using the TouchPlateHeight + 1/8" (converted to mm)

// Remaining variables you probably don't need to change unless you know what you're doing

string ResultText = "";										// string to capture user input in Questions
string G0String = ""; 										// variable for G00 or G01.  I wanted a way to use G01 while debugging, but use G00 for run mode.  
														// so I use this to insert G01 to move at feedrate speeds (slow things down for troubleshooting) and in run mode use G00 for rapid movements
														// I set this early on, checking if in debug mode or not.
													
bool XHomeState = AS3.Getbuttonstate(107); 				// Check if X axis has been homed - AS3.Getbuttonstate is used to determine this from UCCNC
bool YHomeState = AS3.Getbuttonstate(108); 				// Check if Y axis has been homed - AS3.Getbuttonstate is used to determine this from UCCNC
bool ZHomeState = AS3.Getbuttonstate(109); 				// Check if Z axis has been homed - AS3.Getbuttonstate is used to determine this from UCCNC
bool ProbeX = false; 									// Boolean used to determine if macro should probe the X axis based on user input
bool ProbeY = false; 									// Boolean used to determine if macro should probe the Y axis based on user input
bool ProbeZ = false;									// Boolean used to determine if macro should probe the Z axis based on user input

double XMachineCoord = AS3.Getfielddouble(871); 		// Current X axis machine coordinate - AS3.Getfielddouble determines this from UCCNC
double YMachineCoord = AS3.Getfielddouble(872); 		// Current Y axis machine coordinate - AS3.Getfielddouble determines this from UCCNC
double ZMachineCoord = AS3.Getfielddouble(873); 		// Current Z axis machine coordinate (not used?)  - AS3.Getfielddouble determines this from UCCNC
double WCSOrigin = 0;									// Used to determine where the 3 axis probe is located on the work piece.  0=Left/Front 1=Left/Rear 2=Right/Front 3=Right/Rear
double XProbeDirection = 1;								// When user selects where the probe is, this will determine which way to probe for the edge (it's either 1 or -1)
double YProbeDirection = 1;								// When user selects where the probe is, this will determine which way to probe for the edge (it's either 1 or -1)
double ToolDiameter = 0									// store the tool's diameter from user input.  Note that you should review this script for units to make sure it works for you
double TempDouble = 0;										// temporary variable to do math outside of GCode string values.  



	//  During debugging using G01 instead of G00 to slow things down for testing
	if (DebugMode) {
		G0String = "G01";
	}
	else {
		G0String = "G00";
	}

	if (DebugMode) {
		MessageBox.Show (exec.mainform, "Starting", "DEBUG", MessageBoxButtons.OK, MessageBoxIcon.Information);
	}
// do some checks

	if (! XHomeState || ! YHomeState)
		{
		MessageBox.Show (exec.mainform, "X and/or Y axes have not yet been referenced." + "\n" + "Home X & Y axis before attempting to zero tool.", "X and Y Axes not Referenced", MessageBoxButtons.OK, MessageBoxIcon.Error);
		exec.AddStatusmessage("Macro aborted - X or Y axis not referenced");
		exec.Stop();
		return;
		}
		
	if (! ZHomeState)
		{
		MessageBox.Show (exec.mainform, "Z axis has not yet been referenced." + "\n" + "Home Z axis before attempting to zero tool.", "Z Axis not Referenced", MessageBoxButtons.OK, MessageBoxIcon.Error);
		exec.AddStatusmessage("Macro aborted - Z Axis not Referenced");
		exec.Stop();
		return;
		}

	// Check Probe Input - if already active then abort.  AS3.GetLED(37) indicates if the probe is active
	if (AS3.GetLED(37)) 
		{
		MessageBox.Show (exec.mainform, "Probe Input is currently active." + "\n" + "Check connections and try again.", "Probe Already Activated", MessageBoxButtons.OK, MessageBoxIcon.Error);
		exec.AddStatusmessage("Macro aborted - Probe Already Active");
		exec.Stop();
		return;
		}

	// select axes to auto zero
	ResultText = exec.TextQuestion("Which Axes to auto zero?  Enter X|Y|Z or multiple i.e. XY").ToUpper();
	
	if (ResultText.Contains("X")) {
		ProbeX = true;
	}
	else {
		ProbeX = false;
	}

	if (ResultText.Contains("Y")) {
		ProbeY = true;
	}
	else {
		ProbeY = false;
	}

	if (ResultText.Contains("Z")) {
		ProbeZ = true;
	}
	else {
		ProbeZ = false;
	}

	if (DebugMode) {
		MessageBox.Show (exec.mainform, "ProbeX: " + ProbeX + " ProbeY: " + ProbeY + " ProbeZ: " + ProbeZ, "DEBUG - Probe Values", MessageBoxButtons.OK, MessageBoxIcon.Information);
	}

	if (! ProbeX && ! ProbeY && ! ProbeZ) {
		MessageBox.Show (exec.mainform, "Must choose at least one axis X | Y | Z to probe on.  Aborting", "Choose a valid axis", MessageBoxButtons.OK, MessageBoxIcon.Error);
		exec.AddStatusmessage("Macro aborted - Invalid axis selected to home");
		exec.Stop();
		return; 
	}

	// only ask the user about tthe tool diameter and where the probe is if they are probing X or Y-Axis
	if (ProbeX || ProbeY) {
		
		// since probing X or Y, need the tool diameter so ask the user for the bit diameter (not needed if only probing Z)

		// check for Imperial or metric for the bit diameter, as set by the BitDiameterInInches boolean at the top and handle the conversion if necessary
		if (BitDiameterInInches) {
			ToolDiameter = exec.Question("Enter tool diameter in inches");
			// JDM converting tool diameter to mm since I'm with most of the world's population in working in metric, but my bits are imperial. 
			ToolDiameter = ToolDiameter * 25.4;
		}
		else {
			ToolDiameter = exec.Question("Enter tool diameter in mm");;		
		}
		
		// Identify where the probe is
		// 0=Left/Front 1=Left/Rear 2=Right/Front 3=Right/Rear
		WCSOrigin = exec.Question("Where is the probe? 0=Left/Front 1=Left/Rear 2=Right/Front 3=Right/Rear?  Default is 0");
		if ((WCSOrigin < 0) || (WCSOrigin > 3)) {
			// error - convert to try/catch?
			MessageBox.Show (exec.mainform, "Must choose a valid location for the probe.  Aborting", "Choose a valid probe location", MessageBoxButtons.OK, MessageBoxIcon.Error);
			exec.AddStatusmessage("Macro aborted - Invalid probe location selected");
			exec.Stop();
			return; 
		}

		// setup variables based on where probe was selected

		  switch ((int)WCSOrigin) {
			case 0:
			XProbeDirection = 1;
			YProbeDirection = 1;
			break;

			case 1:
				XProbeDirection = 1;
				YProbeDirection = -1;
				break;

			case 2:
				XProbeDirection = -1;
				YProbeDirection = 1;
				break;

			case 3:
				XProbeDirection = -1;
				YProbeDirection = -1;
				break;	
				
			default:
				XProbeDirection = 1;
				YProbeDirection = 1;
				break;	
		  } // switch


		if (DebugMode) {
			MessageBox.Show (exec.mainform, "XProbeDirection: " + XProbeDirection + " YProbeDirection: " + YProbeDirection, "Probe Direction info", MessageBoxButtons.OK, MessageBoxIcon.Information);
		}
	}

	// check if user wants to Probe Z axis, and if so do it
	if (ProbeZ) {
		TempDouble = (ZProbeDistance*-1); // reverse probe direction, so we're probing in the right way
		exec.Code("G31 Z" + TempDouble + " F" + ProbeFeedRate); 
		while(exec.IsMoving()){}
  		exec.Wait(100);
  		Console.Beep();
  
		// touch plate thickness / height Correction
	    exec.Code("G92 Z" + TouchPlateHeight); 

		// now retract Z, if probing X or Y then only retract to XYProbeHeight .  Otherwise the end of this code will bring it back to the final SafeZ height
		if (ProbeX || ProbeY) {
			exec.Code(G0String + " Z" + XYProbeHeight); 
		}
		
  		while(exec.IsMoving()){}
  		exec.Wait(100); 
  }

  
	if (ProbeX) {		
		if (PauseProbe) {
			MessageBox.Show (exec.mainform, "Align Tool Flutes for X-Axis Travel and Press OK", "Align Flutes", MessageBoxButtons.OK, MessageBoxIcon.Information);
		}

		// Lower Z axis to X and Y probe height
		exec.Code(G0String + " Z" + XYProbeHeight); 
  		while(exec.IsMoving()){}
  		exec.Wait(100);
		
		// save off current X axis machine coordinates for math later
		XMachineCoord = AS3.Getfielddouble(97);
		
		if (DebugMode) {
			MessageBox.Show (exec.mainform, "XMachineCoord = " + XMachineCoord + "\n" + "XProbeDistance = " + XProbeDistance + "\n" + "probing to " + (XMachineCoord + (XProbeDistance * XProbeDirection)), "Probing debug info", MessageBoxButtons.OK, MessageBoxIcon.Information);
		}
		
		TempDouble = (XMachineCoord + (XProbeDistance * XProbeDirection));
  		exec.Code("G31 X" + TempDouble + " F" + ProbeFeedRate); // Do the X probing with Probe Feedrate.  JDM added the * XProbeDirection to enable touchplate locations
  		while(exec.IsMoving()){}
  		exec.Wait(100);
  		Console.Beep();
		
  		if (DebugMode) {
			MessageBox.Show (exec.mainform, "finished running G31 for X axis" + "\n" + "TouchPlateWidth = " + TouchPlateWidth + " toolradius = " + (ToolDiameter/2) + " XProbeDirection = " + XProbeDirection + " so setting X0 to " + ((TouchPlateWidth - (ToolDiameter/2)) * XProbeDirection), "DEBUG info", MessageBoxButtons.OK, MessageBoxIcon.Information);
			}
		
		// Zero the X-axis
		TempDouble = ((TouchPlateWidth - (ToolDiameter/2)) * XProbeDirection);
		exec.Code("G92 X" + TempDouble); 
		
		// Safe X retract
		TempDouble = ((TouchPlateWidth/2) - (ToolDiameter/2)) * XProbeDirection;
  		exec.Code(G0String + " X" + TempDouble); 
  		while(exec.IsMoving()){}
  		exec.Wait(100);


	} // if ProbeX


 	if (ProbeY) {
		if (PauseProbe) {
			MessageBox.Show (exec.mainform, "Align Tool Flutes for Y-Axis Travel and Press OK", "Align Flutes", MessageBoxButtons.OK, MessageBoxIcon.Information);
		}

		// Lower Z axis to X and Y probe height
		exec.Code(G0String + " Z" + XYProbeHeight); 
  		while(exec.IsMoving()){}
  		exec.Wait(100);
		
		// save off current Y axis machine coordinates for math later
		YMachineCoord = AS3.Getfielddouble(98);
		
		if (DebugMode) {
			MessageBox.Show (exec.mainform, "YMachineCoord = " + YMachineCoord + "\n" + "YProbeDistance = " + YProbeDistance + "\n" + "probing to " + (YMachineCoord + (YProbeDistance * YProbeDirection)), "Probing debug info", MessageBoxButtons.OK, MessageBoxIcon.Information);
		}	
		
		// Do the Y probing with Probe Feedrate.
		TempDouble = (YMachineCoord + (YProbeDistance * YProbeDirection));
  		exec.Code("G31 Y" + TempDouble + " F" + ProbeFeedRate); 
  		while(exec.IsMoving()){}
  		exec.Wait(100);
  		Console.Beep();
		
  		if (DebugMode) {
			MessageBox.Show (exec.mainform, "finished running G31 for Y axis." + "\n" + "TouchPlateWidth = " + TouchPlateWidth + " toolradius = " + (ToolDiameter/2) + " YProbeDirection = " + YProbeDirection + " so setting Y0 to " + ((TouchPlateWidth - (ToolDiameter/2)) * YProbeDirection), "DEBUG info", MessageBoxButtons.OK, MessageBoxIcon.Information);
			}
		
		// Zero the Y-axis
		TempDouble = ((TouchPlateWidth - (ToolDiameter/2)) * YProbeDirection);
		exec.Code("G92 Y" + TempDouble); 
		
		// Safe Y retract
		TempDouble = ((TouchPlateWidth/2) - (ToolDiameter/2)) * YProbeDirection;
  		exec.Code(G0String + " Y" + TempDouble); 
  		while(exec.IsMoving()){}
  		exec.Wait(100);

	} // if ProbeY

	
	// retract Z to SafeZ height plus the TouchPlateHeight
	TempDouble = (SafeZ + TouchPlateHeight);
	exec.Code(G0String + " Z" + TempDouble);
	while(exec.IsMoving()){}
	exec.Wait(100); 
	
	Console.Beep();
	Console.Beep();



